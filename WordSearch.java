import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.StringTokenizer;
import java.util.ArrayList;
import java.util.List;

/**
 * Solves a wordsearch puzzle generated by:
 * https://puzzlemaker.discoveryeducation.com/word-search
 * 
 * Puzzle in puzzle.txt and words in searchwords.txt
 */
public class WordSearch {

    int MAX = 15;
    char puzzle[][] = new char[MAX][MAX];
    boolean solution[][] = new boolean[MAX][MAX];

    public static void main(String arg[]) {
        WordSearch me = new WordSearch();
        me.readPuzzle("puzzle.txt");
        me.printPuzzle();
        
        List<String> words = me.readWords("searchwords.txt");
        for (String word: words) {
            me.wordSearch(word);
            me.printSolution();
        }
        System.out.println("Final solution");
        me.printSolution();

    }

    private void printPuzzle() {
        System.out.println("Puzzle");
        for (int i = 0; i < MAX; i++) {
            System.out.print("-");
        }
        System.out.println();
        for (int i = 0; i < MAX; i++) {
            for (int j = 0; j < MAX; j++) {
                System.out.print(puzzle[i][j]);
            }
            System.out.println();
        }
        for (int i = 0; i < MAX; i++) {
            System.out.print("-");
        }
        System.out.println();
    }

    private void printSolution() {
        for (int i = 0; i < MAX; i++) {
            for (int j = 0; j < MAX; j++) {
                System.out.print(solution[i][j] ? puzzle[i][j] : ".");
            }
            System.out.println();
        }
    }

    private void readPuzzle(String file) {
        BufferedReader br = null;

        try {
            br = new BufferedReader(new FileReader(file));

            String st;
            int i = 0;
            while ((st = br.readLine()) != null) {
                if (st.isEmpty())
                    continue;
                int j = 0;
                StringTokenizer tokenizer = new StringTokenizer(st, "\t");
                while (tokenizer.hasMoreElements()) {
                    char c = ((String) tokenizer.nextElement()).charAt(0);
                    // System.out.println(i+" "+j+" I see c: "+c);
                    puzzle[i][j] = Character.toUpperCase(c);
                    j++;
                }
                i++;
            }
            if (br != null) {
                br.close();
            }
        } catch (Exception e) {
            System.out.println("Error reading puzzle " + e.getMessage());
            e.printStackTrace();
            return;
        }

    }

    private List<String> readWords(String file) {
        BufferedReader br = null;
        List<String> result = new ArrayList<String>();
        try {
            br = new BufferedReader(new FileReader(file));
            String word;
            while ((word = br.readLine()) != null) {
                result.add(word.trim());
            }
            if (br != null) {
                br.close();
            }
        } catch (Exception e) {
            System.out.println("Error searching puzzle " + e.getMessage());
            e.printStackTrace();
            return null;
        }
        return result;
    }
    /**
     * For each square look at all 8 directions, check boundary, check if there is
     * word match.
     * If number of characters matched is same as length then we have a word match,
     * mark as so in the solution array
     * 
     * @param text
     */
    private void wordSearch(String text) {
        System.out.println("searching for: " + text);
        text = text.toUpperCase();
        for (int row = 0; row < MAX; row++) {
            for (int col = 0; col < MAX; col++) {

                // check west
                int r = row;
                int c = col;
                int i = 0;
                while (c >= 0 && i < text.length() && puzzle[r][c] == text.charAt(i)) {
                    c--;
                    i++;
                }
                if (i == text.length()) {
                    for (int n = 0; n < text.length(); n++) {
                        solution[row][col - n] = true;
                    }
                    return;
                }

                // check east
                r = row;
                c = col;
                i = 0;
                // System.out.println(puzzle[r][c] +" vs "+ text.charAt(i));
                while (c < MAX && i < text.length() && puzzle[r][c] == text.charAt(i)) {
                    c++;
                    i++;
                }
                if (i == text.length()) {
                    for (int n = 0; n < text.length(); n++) {
                        solution[row][col + n] = true;
                    }
                    return;
                }

                // check north
                r = row;
                c = col;
                i = 0;
                while (r >= 0 && i < text.length() && puzzle[r][c] == text.charAt(i)) {
                    r--;
                    i++;
                }
                if (i == text.length()) {
                    for (int n = 0; n < text.length(); n++) {
                        solution[row - n][col] = true;
                    }
                    return;
                }

                // check south
                r = row;
                c = col;
                i = 0;
                while (r < MAX && i < text.length() && puzzle[r][c] == text.charAt(i)) {
                    r++;
                    i++;
                }
                if (i == text.length()) {
                    for (int n = 0; n < text.length(); n++) {
                        solution[row + n][col] = true;
                    }
                    return;
                }

                // check northwest
                r = row;
                c = col;
                i = 0;
                while (r >= 0 && c >= 0 && i < text.length() && puzzle[r][c] == text.charAt(i)) {
                    r--;
                    c--;
                    i++;
                }
                if (i == text.length()) {
                    for (int n = 0; n < text.length(); n++) {
                        solution[row - n][col - n] = true;
                    }
                    return;
                }

                // check northeast
                r = row;
                c = col;
                i = 0;
                while (r >= 0 && c < MAX && i < text.length() && puzzle[r][c] == text.charAt(i)) {
                    r--;
                    c++;
                    i++;
                }
                if (i == text.length()) {
                    for (int n = 0; n < text.length(); n++) {
                        solution[row - n][col + n] = true;
                    }
                    return;
                }

                // check southeast
                r = row;
                c = col;
                i = 0;
                while (r < MAX && c < MAX && i < text.length() && puzzle[r][c] == text.charAt(i)) {
                    r++;
                    c++;
                    i++;
                }
                if (i == text.length()) {
                    for (int n = 0; n < text.length(); n++) {
                        solution[row + n][col + n] = true;
                    }
                    return;
                }

                // check southwest
                r = row;
                c = col;
                i = 0;
                while (r < MAX && c >= 0 && i < text.length() && puzzle[r][c] == text.charAt(i)) {
                    r++;
                    c--;
                    i++;
                }
                if (i == text.length()) {
                    for (int n = 0; n < text.length(); n++) {
                        solution[row + n][col - n] = true;
                    }
                    return;
                }
                // end

            }
        }

    }
}
