import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.StringTokenizer;
import java.util.ArrayList;
import java.util.List;

/**
 * Solves a wordsearch puzzle generated by:
 * https://puzzlemaker.discoveryeducation.com/word-search
 * 
 * Puzzle data in "input" folder puzzle.txt and words in searchwords.txt
 * This will generate an output data.js, to be drawn by solution.html
 */
public class WordSearch {

    int MAX_X = 15;
    int MAX_Y = 15;
    static String INPUT_FOLDER = "input";
    static String OUTPUT_FOLDER = "output";
    static String PUZZLE_DATA_FILE = "."+File.separator+INPUT_FOLDER+File.separator+"puzzle.txt";
    static String WORDS_DATA_FILE = "."+File.separator+INPUT_FOLDER+File.separator+"searchwords.txt";
    static String PUZZLE_SOLUTION_DATA_FILE = "."+File.separator+OUTPUT_FOLDER+File.separator+"data.js";
    public record SolutionCoordinates (String word, int x1, int y1, int x2, int y2) {}

    char puzzle[][] = new char[MAX_X][MAX_Y];
    boolean solution[][] = new boolean[MAX_X][MAX_Y];
    List<SolutionCoordinates> solutionCoordinates = new ArrayList<SolutionCoordinates>();

    public static void main(String arg[]) {

        WordSearch me = new WordSearch();
        me.readPuzzle(PUZZLE_DATA_FILE);
        me.printPuzzle();
        
        List<String> words = me.readWords(WORDS_DATA_FILE);
        for (String word: words) {
            me.wordSearch(word);
            //me.printSolution();
        }
        System.out.println("Final solution");
        me.printSolution();
        System.out.println();
        for (SolutionCoordinates s: me.solutionCoordinates) {
            System.out.format("%s from (%d,%d) to (%d,%d)\n",s.word,s.x1,s.y1,s.x2,s.y2);
        }
        System.out.println("");
        System.out.println("Please check: "+OUTPUT_FOLDER+File.separator+"solution.html");
        me.generateDataOutput();

    }

    private void printPuzzle() {
        System.out.println("Puzzle");
        for (int i = 0; i < MAX_Y; i++) {
            System.out.print("-");
        }
        System.out.println();
        for (int i = 0; i < MAX_X; i++) {
            for (int j = 0; j < MAX_Y; j++) {
                System.out.print(puzzle[i][j]);
            }
            System.out.println();
        }
        for (int i = 0; i < MAX_Y; i++) {
            System.out.print("-");
        }
        System.out.println();
    }

    private void printSolution() {
        for (int i = 0; i < MAX_X; i++) {
            for (int j = 0; j < MAX_Y; j++) {
                System.out.print(solution[i][j] ? puzzle[i][j] : ".");
            }
            System.out.println();
        }
    }

    private void generateDataOutput() {
        try
        {
            BufferedWriter writer = new BufferedWriter(new FileWriter(PUZZLE_SOLUTION_DATA_FILE));
            writer.write("var board=[\n");
            for (int i = 0; i < MAX_X; i++) {
                writer.write("\t'");
                for (int j = 0; j < MAX_Y; j++) {
                    writer.write(puzzle[i][j]);
                }
                writer.write("'");
                writer.write(",");
                writer.write("\n");
            }
            writer.write("];\n");

            writer.write("var solutions=[\n");
            for (SolutionCoordinates s: solutionCoordinates) {
                String t = String.format("\t[%d,%d,%d,%d], //%s\n",s.x1,s.y1,s.x2,s.y2,s.word);
                writer.write(t);
            }
            writer.write("];\n");

            writer.close();        
        }
        catch (IOException e)
        {
            System.out.println("Error writing output data " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void readPuzzle(String file) {
        BufferedReader br = null;

        try {
            br = new BufferedReader(new FileReader(file));

            String st;
            int i = 0;
            while ((st = br.readLine()) != null) {
                if (st.isEmpty())
                    continue;
                int j = 0;
                StringTokenizer tokenizer = new StringTokenizer(st, "\t");
                while (tokenizer.hasMoreElements()) {
                    char c = ((String) tokenizer.nextElement()).charAt(0);
                    // System.out.println(i+" "+j+" I see c: "+c);
                    puzzle[i][j] = Character.toUpperCase(c);
                    j++;
                }
                i++;
            }
            if (br != null) {
                br.close();
            }
        } catch (Exception e) {
            System.out.println("Error reading puzzle " + e.getMessage());
            e.printStackTrace();
            return;
        }

    }

    private List<String> readWords(String file) {
        BufferedReader br = null;
        List<String> result = new ArrayList<String>();
        try {
            br = new BufferedReader(new FileReader(file));
            String word;
            while ((word = br.readLine()) != null) {
                result.add(word.trim());
            }
            if (br != null) {
                br.close();
            }
        } catch (Exception e) {
            System.out.println("Error searching puzzle " + e.getMessage());
            e.printStackTrace();
            return null;
        }
        return result;
    }
    /**
     * For each square look at all 8 directions, check boundary, check if there is
     * word match.
     * If number of characters matched is same as length then we have a word match,
     * mark as so in the solution array
     * 
     * @param text
     */
    private void wordSearch(String text) {
        System.out.println("searching for: " + text);
        text = text.toUpperCase();
        for (int row = 0; row < MAX_X; row++) {
            for (int col = 0; col < MAX_Y; col++) {

                // check west
                int r = row;
                int c = col;
                int i = 0;
                while (c >= 0 && i < text.length() && puzzle[r][c] == text.charAt(i)) {
                    c--;
                    i++;
                }
                if (i == text.length()) {
                    System.out.println("found w solution from ("+row+"," +col+") to ("+(row)+","+(col-i+1)+")");
                    solutionCoordinates.add(new SolutionCoordinates(text,row,col, row,col-i+1));
                    for (int n = 0; n < text.length(); n++) {
                        solution[row][col - n] = true;
                    }
                    return;
                }

                // check east
                r = row;
                c = col;
                i = 0;
                // System.out.println(puzzle[r][c] +" vs "+ text.charAt(i));
                while (c < MAX_Y && i < text.length() && puzzle[r][c] == text.charAt(i)) {
                    c++;
                    i++;
                }
                if (i == text.length()) {
                    System.out.println("found e solution from ("+row+"," +col+") to ("+(row)+","+(col+i-1)+")");
                    solutionCoordinates.add(new SolutionCoordinates(text,row,col, row,col+i-1));
                    for (int n = 0; n < text.length(); n++) {
                        solution[row][col + n] = true;
                    }
                    return;
                }

                // check north
                r = row;
                c = col;
                i = 0;
                while (r >= 0 && i < text.length() && puzzle[r][c] == text.charAt(i)) {
                    r--;
                    i++;
                }
                if (i == text.length()) {
                    System.out.println("found n solution from ("+row+"," +col+") to ("+(row-i+1)+","+(col)+")");
                    solutionCoordinates.add(new SolutionCoordinates(text,row,col, row-i+1,col));

                    for (int n = 0; n < text.length(); n++) {
                        solution[row - n][col] = true;
                    }
                    return;
                }

                // check south
                r = row;
                c = col;
                i = 0;
                while (r < MAX_Y && i < text.length() && puzzle[r][c] == text.charAt(i)) {
                    r++;
                    i++;
                }
                if (i == text.length()) {
                    System.out.println("found s solution from ("+row+"," +col+") to ("+(row+i-1)+","+(col)+")");
                    solutionCoordinates.add(new SolutionCoordinates(text,row,col, row+i-1,col));
                    for (int n = 0; n < text.length(); n++) {
                        solution[row + n][col] = true;
                    }
                    return;
                }

                // check northwest
                r = row;
                c = col;
                i = 0;
                while (r >= 0 && c >= 0 && i < text.length() && puzzle[r][c] == text.charAt(i)) {
                    r--;
                    c--;
                    i++;
                }
                if (i == text.length()) {
                    System.out.println("found nw solution from ("+row+"," +col+") to ("+(row-i+1)+","+(col-i+1)+")");
                    solutionCoordinates.add(new SolutionCoordinates(text,row,col, row-i+1,col-i+1));
                    for (int n = 0; n < text.length(); n++) {
                        solution[row - n][col - n] = true;
                    }
                    return;
                }

                // check northeast
                r = row;
                c = col;
                i = 0;
                while (r >= 0 && c < MAX_X && i < text.length() && puzzle[r][c] == text.charAt(i)) {
                    r--;
                    c++;
                    i++;
                }
                if (i == text.length()) {
                    System.out.println("found ne solution from ("+row+"," +col+") to ("+(row-i+1)+","+(col+i-1)+")");
                    solutionCoordinates.add(new SolutionCoordinates(text,row,col, row-i+1,col+i-1));
                    for (int n = 0; n < text.length(); n++) {
                        solution[row - n][col + n] = true;
                    }
                    return;
                }

                // check southeast
                r = row;
                c = col;
                i = 0;
                while (r < MAX_X && c < MAX_Y && i < text.length() && puzzle[r][c] == text.charAt(i)) {
                    r++;
                    c++;
                    i++;
                }
                if (i == text.length()) {
                    System.out.println("found se solution from ("+row+"," +col+") to ("+(row+i-1)+","+(col+i-1)+")");
                    solutionCoordinates.add(new SolutionCoordinates(text,row,col, row+i-1,col+i-1));

                    for (int n = 0; n < text.length(); n++) {
                        solution[row + n][col + n] = true;
                    }
                    return;
                }

                // check southwest
                r = row;
                c = col;
                i = 0;
                while (r < MAX_X && c >= 0 && i < text.length() && puzzle[r][c] == text.charAt(i)) {
                    r++;
                    c--;
                    i++;
                }
                if (i == text.length()) {
                    System.out.println("found sw solution from ("+row+"," +col+") to ("+(row+i-1)+","+(col-i+1)+")");
                    solutionCoordinates.add(new SolutionCoordinates(text,row,col, row+i-1,col-i+1));
                    for (int n = 0; n < text.length(); n++) {
                        solution[row + n][col - n] = true;
                    }
                    return;
                }
                // end

            }
        }

    }
}
